package GUI;

import Economia.Contrato;
import Enums.Estado;
import Identificadores.Dni;
import Identificadores.Firma;
import Interfaces.Mostrable;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

/**
 *
 * @author David
 */
public class SeleccionarValidarContrato extends JDialog implements Mostrable {
    private JPanel panelPrincipal;
    private JButton botonOK;
    private JList lista;
    private ArrayList<Contrato> contratos;
    private DefaultComboBoxModel<Contrato> cbm;

    /**
     *
     * @param contratos
     * @param firma
     */
    public SeleccionarValidarContrato(ArrayList<Contrato> contratos, Dni firma) {
        setContentPane(panelPrincipal);
        setModal(true);
        setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        setTitle("Validar contrato");

        this.contratos = contratos;
        cbm = new DefaultComboBoxModel<Contrato>();

        for (Contrato c : contratos) {
            cbm.addElement(c);
        }

        lista.setModel(cbm);

        botonOK.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Contrato contrato = contratos.get(lista.getSelectedIndex());
                contratos.remove(contrato);

                if (contrato.getEstado() == Estado.NEGOCIACION) {
                    try {
                        contrato.validar();
                        JOptionPane.showMessageDialog(null, "El contrato se ha verificado con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);

                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Se ha producido un error", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else if (contrato.getEstado() == Estado.FIRMA) {
                    if (contrato.getListaFirmantes() == null) {
                        contrato.setListaFirmantes(new ArrayList<Dni>());
                    }
                    if (contrato.getFirmas() == null) {
                        contrato.setFirmas(new ArrayList<Firma>());
                    }

                    contrato.addFirma(new Firma(firma, "negro"), firma);

                    try {
                        contrato.validar();
                        JOptionPane.showMessageDialog(null, "El contrato se ha validado con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Ha firmado el contrato", "Exito", JOptionPane.INFORMATION_MESSAGE);
                    }
                }

                if (contrato.getEstado() == Estado.EN_CURSO) {
                    contrato.finalizar();
                    JOptionPane.showMessageDialog(null, "El contrato ha finalizado con exito", "Exito", JOptionPane.INFORMATION_MESSAGE);

                }

                contratos.add(contrato);
            }
        });

        pack();
        setLocationRelativeTo(null);
    }

    /**
     *
     * @return
     */
    public ArrayList<Contrato> mostrarDialog() {
        setVisible(true);
        return contratos;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelPrincipal = new JPanel();
        panelPrincipal.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("Selecciona el contrato");
        panelPrincipal.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lista = new JList();
        panelPrincipal.add(lista, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(300, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panelPrincipal.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        botonOK = new JButton();
        botonOK.setText("Seleccionar");
        panel1.add(botonOK, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @return 
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelPrincipal;
    }
}
